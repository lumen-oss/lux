name: CD (binary artifacts)

permissions:
  contents: write

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

jobs:
  dist-package:
    name: ${{ matrix.target }}
    if: github.repository_owner == 'nvim-neorocks' && (
      ( github.event_name == 'release' && startsWith(github.event.release.name, 'v')) ||
        github.event_name == 'workflow_dispatch' ||
        github.event_name == 'pull_request'
      )
    continue-on-error: true
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-pc-windows-msvc
            os: windows-2025
          - target: aarch64-apple-darwin
            os: macos-15
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04-arm
          # - target: aarch64-unknown-linux-musl
          #   os: ubuntu-22.04
          # - target: aarch64-pc-windows-msvc
          #   os: windows-2022
          # - target: x86_64-apple-darwin
          #   os: macos-13
          # - target: x86_64-unknown-freebsd
          #   os: ubuntu-22.04
          # - target: x86_64-unknown-linux-musl
          #   os: ubuntu-22.04
      fail-fast: false
    timeout-minutes: 120
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      # NOTE: We cannot cross-compile yet because of dynamically linked dependencies:
      # - gpgme -> lgpg-error, lgpgme
      # - git2 -> lgit2
      #
      # - name: Setup cross toolchain
      #   uses: taiki-e/setup-cross-toolchain-action@v1
      #   with:
      #     target: ${{ matrix.target }}
      #   if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')
      #
      # - name: Add target via rustup
      #   run: rustup target add ${{ matrix.target }}
      #   if: "!endsWith(matrix.target, 'windows-msvc')"

      - name: "Setup environment for MSVC"
        run: echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - name: "Setup environment for aarch64-darwin"
        # lux-lua needs this to build on darwin
        run: echo "RUSTFLAGS=${RUSTFLAGS} -C link-arg=-undefined -C link-arg=dynamic_lookup" >> "${GITHUB_ENV}"
        if: startsWith(matrix.target, 'aarch64-apple-darwin')

      - name: Install C/C++ Compiler
        uses: rlalik/setup-cpp-compiler@master
        with:
          compiler: clang-latest
        if: "startsWith(matrix.os, 'windows')"

      - name: Install MSVC Compiler Toolchain
        uses: ilammy/msvc-dev-cmd@v1
        if: "startsWith(matrix.os, 'windows')"

      - name: Install build dependencies (Linux)
        if: "startsWith(matrix.os, 'ubuntu')"
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgpgme11-dev \
            libgpg-error-dev \

      - name: Install build dependencies (macOS)
        if: "startsWith(matrix.os, 'macos')"
        run: brew install gpgme

      - name: Build binary distributions (*nix)
        if: "!startsWith(matrix.os, 'windows')"
        run: |
          cargo xtask dist-package
        env:
          SYSTEM_DEPS_LINK: static
          LUX_SIGN_PRIVATE_KEY: ${{ secrets.LUX_SIGN_PRIVATE_KEY }}
          LUX_SIGN_PRIVATE_KEY_PASS: ${{ secrets.LUX_SIGN_PRIVATE_KEY_PASS }}

      - name: Build binary distributions (Windows)
        if: "startsWith(matrix.os, 'windows')"
        run: |
          cargo xtask dist-package
        env:
          SYSTEM_DEPS_LINK: static
          LUX_SIGN_PRIVATE_KEY: ${{ secrets.LUX_SIGN_PRIVATE_KEY }}
          LUX_SIGN_PRIVATE_KEY_PASS: ${{ secrets.LUX_SIGN_PRIVATE_KEY_PASS }}

      - name: Upload .deb package
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'ubuntu') && github.event_name != 'release'
        with:
          path: target/dist/*.deb
          overwrite: true
          name: lux-${{ matrix.target }}.deb

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'ubuntu') && github.event_name != 'release'
        with:
          path: target/dist/*.AppImage
          overwrite: true
          name: lux-${{ matrix.target }}.AppImage

      - name: Upload PKGBUILD
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'ubuntu') && github.event_name != 'release'
        with:
          path: target/dist/PKGBUILD
          overwrite: true
          name: lux-${{ matrix.target }}.PKGBUILD

      - name: Upload tar archive
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'ubuntu') && github.event_name != 'release'
        with:
          path: target/dist/*.tar.gz
          overwrite: true
          name: lux-${{ matrix.target }}.tar.gz

      - name: Upload dmg archive
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'macos') && github.event_name != 'release'
        with:
          path: target/dist/*.dmg
          overwrite: true
          name: lux-${{ matrix.target }}.dmg

      - name: Upload exe installer
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'windows') && github.event_name != 'release'
        with:
          path: target/dist/*-setup.exe
          overwrite: true
          name: lux-${{ matrix.target }}-setup.exe

      - name: Upload msi installer
        uses: actions/upload-artifact@v4
        if: startsWith(matrix.os, 'windows') && github.event_name != 'release'
        with:
          path: target/dist/*.msi
          overwrite: true
          name: lux-${{ matrix.target }}.msi

      - name: Upload .deb package to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.os, 'ubuntu') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/*.deb
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload AppImage to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.os, 'ubuntu') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/*.AppImage
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload PKGBUILD to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.target, 'x86_64-unknown-linux-gnu') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/PKGBUILD
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload tar archive to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.target, 'x86_64-unknown-linux-gnu') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/*.tar.gz
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload dmg archive to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.os, 'macos') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/*.dmg
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload msi installer to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.os, 'windows') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/*.msi
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload exe installer to release
        uses: svenstaro/upload-release-action@v2
        if: startsWith(matrix.os, 'windows') && github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/*-setup.exe
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload lux-lua51.so to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/lux-lua51-${{ matrix.target }}.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload lux-lua52.so to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/lux-lua52-${{ matrix.target }}.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload lux-lua53.so to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/lux-lua53-${{ matrix.target }}.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload lux-lua54.so to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/lux-lua54-${{ matrix.target }}.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true

      - name: Upload lux-luajit.so to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: target/dist/lux-luajit-${{ matrix.target }}.*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
