name: CD

permissions:
  contents: write

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CARGO_NET_RETRY: 10
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: -D warnings
  RUSTUP_MAX_RETRIES: 10

defaults:
  run:
    shell: bash

jobs:
  upload-assets:
    name: ${{ matrix.target }}
    if: github.repository_owner == 'nvim-neorocks' && (
      ( github.event_name == 'release' && startsWith(github.event.release.name, 'v')) ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-musl
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-13
          # - target: aarch64-pc-windows-msvc
          #   os: windows-2022
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-unknown-linux-musl
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-13
          - target: x86_64-unknown-freebsd
            os: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        if: "!endsWith(matrix.target, 'windows-msvc')"

      - name: Setup cachix
        uses: cachix/cachix-action@v16
        if: "!endsWith(matrix.target, 'windows-msvc')"
        with:
          name: neorocks
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'

      - name: Nix devShell
        uses: nicknovitski/nix-develop@v1.2.1
        if: "!endsWith(matrix.target, 'windows-msvc')"

      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
        if: startsWith(matrix.os, 'ubuntu') && !contains(matrix.target, '-musl')

      - name: Install Rust Toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1

      - name: Install C/C++ Compiler
        uses: rlalik/setup-cpp-compiler@master
        with:
          compiler: clang-latest
        if: endsWith(matrix.target, 'windows-msvc')

      - name: Install MSVC Compiler Toolchain
        uses: ilammy/msvc-dev-cmd@v1
        if: endsWith(matrix.target, 'windows-msvc')

      - name: "Setup environment for MSVC"
        run: |
          echo "RUSTFLAGS=${RUSTFLAGS} -C target-feature=+crt-static" >> "${GITHUB_ENV}"
          echo "OPENSSL_DIR=C:\Program Files\OpenSSL" >> "${GITHUB_ENV}"
          echo "OPENSSL_LIB_DIR=C:\Program Files\OpenSSL\lib\VC\x64\MD" >> "${GITHUB_ENV}"
        if: endsWith(matrix.target, 'windows-msvc')

      - name: Install Build Dependencies
        run: |
          $env:PATH = "C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\ProgramData\chocolatey\bin"
          [Environment]::SetEnvironmentVariable("Path", $env:PATH, "Machine")
          choco install -y --no-progress openssl libgit2
        if: endsWith(matrix.target, 'windows-msvc')

      - uses: taiki-e/upload-rust-binary-action@v1
        # TODO: also build `lux-lua`
        with:
          bin: lx
          target: ${{ matrix.target }}
          features: vendored-lua
          tar: all
          zip: windows
          token: ${{ secrets.GITHUB_TOKEN }}
